// Getting C array into bytes without converting
https://github.com/golang/go/wiki/cgo#turning-c-arrays-into-go-slices
slice := (*[1 << 30]C.uint8_t)(unsafe.Pointer(telegram))[:telegram_len:telegram_len]
fmt.Println("callback called", slice)
Dont use this, the memory is in C!

// ScanIPTunnels scans for all KNX IP Tunneling Interface devices.
func ScanIPTunnels() {
	ap = C.kdrive_ap_create()
	var buffer [4]C.struct_ip_tunn_dev_t
	var length C.uint32_t = 4
	C.kdrive_ap_enum_ip_tunn(ap, &buffer[0], &length)
	fmt.Println("found routers", length)
	fmt.Println(buffer[0])
	C.kdrive_ap_release(ap)
}

// ScanAndOpen searches for IP tunnels and opens the first.
func ScanAndOpen() {
	ap = C.kdrive_ap_create()
	var buffer [1]C.struct_ip_tunn_dev_t
	var length C.uint32_t = 1
	C.kdrive_ap_enum_ip_tunn(ap, &buffer[0], &length)
	if length == 0 {
		fmt.Println("Did not find an IP router")
		return
	}
	var d C.ip_tunn_dev_t = buffer[0]
	fmt.Println("Found IP Router", C.GoString(&d.ip_address[0]))

	res := C.kdrive_ap_open_ip(ap, &d.ip_address[0])
	if res != KDRIVE_ERROR_NONE {
		fmt.Printf("could not access %x\n", res)
		C.kdrive_ap_release(ap)
		return
	}

	fmt.Println("opened connection")
}

// OpenIP opens a connection to a KNX IP Tunneling Interface device.
func OpenIP(ipAddress string) {
	if IsOpen() {
		Close()
		return
	}

	ap = C.kdrive_ap_create()

	if ap == KDRIVE_INVALID_DESCRIPTOR {
		fmt.Println("Unable to create access port. This is a terminal failure")
	}

	ip := C.CString(ipAddress)
	// eth0 is 4 in my docker
	//var iface C.char = 4
	//res := C.kdrive_ap_open_ip_ex(ap, ip, &iface)

	res := C.kdrive_ap_open_ip(ap, ip)
	C.free(unsafe.Pointer(ip))
	if res != KDRIVE_ERROR_NONE {
		fmt.Printf("could not access %x\n", res)
		C.kdrive_ap_release(ap)
		return
	}

	fmt.Println("opened connection")

}
